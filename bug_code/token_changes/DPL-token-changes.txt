In index.php, add the following logging lines to log the received token.
$_racetrkrnonce = $_REQUEST['_racetrkrnonce'];
if (is_array($_racetrkrnonce )){
    $_racetrkrnonce = $_racetrkrnonce[0];
}
$_racetrkrnonce = substr($_racetrkrnonce, 0, 10);
$zy_log_file = fopen("/tmp/reqracer/php_log/drupal.log", "a");
flock($zy_log_file, LOCK_EX);
$zy_log_mesg1 = "PID: " . getmypid() . ". ";
$zy_log_mesg1 .= "URL: " . $_SERVER['REQUEST_URI'] . ". ";
$zy_log_mesg1 .= "RequestID: " . $_SERVER['UNIQUE_ID'] . ". ";
$zy_log_mesg1 .= "Action: . ";
$zy_log_mesg1 .= "Referer: " . $_SERVER['HTTP_REFERER'] . ". ";
$zy_log_mesg1 .= "Received Token: " . $_racetrkrnonce . ". ";
$zy_log_mesg1 .= "\r\n";
fwrite($zy_log_file, $zy_log_mesg1);
fflush($zy_log_file);
flock($zy_log_file, LOCK_UN);
fclose($zy_log_file);


In includes/common.inc, add random_string function and modify drupal_goto. Log the redirect token.
function random_string ($length=15) {
    $pool  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $pool .= 'abcdefghijklmnopqrstuvwxyz';
    $pool .= '0123456789';
    $poollen = strlen($pool);
    mt_srand ((double) microtime() * 1000000);
    $string = '';
    for ($i = 0; $i < $length; $i++) {
        $string .= substr($pool, (mt_rand()%($poollen)), 1);
    }
    return $string;
}

function drupal_goto($path = '', array $options = array(), $http_response_code = 302) {
  // A destination in $_GET always overrides the function arguments.
  // We do not allow absolute URLs to be passed via $_GET, as this can be an attack vector.
  error_log("drupal goto\n", 3, "/tmp/drupal.log");
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $destination = drupal_parse_url($_GET['destination']);
    $path = $destination['path'];
    $options['query'] = $destination['query'];
    $options['fragment'] = $destination['fragment'];
  }

  // In some cases modules call drupal_goto(current_path()). We need to ensure
  // that such a redirect is not to an external URL.
  if ($path === current_path() && empty($options['external']) && url_is_external($path)) {
    // Force url() to generate a non-external URL.
    $options['external'] = FALSE;
  }

  drupal_alter('drupal_goto', $path, $options, $http_response_code);

  // The 'Location' HTTP header must be absolute.
  $options['absolute'] = TRUE;

  $_racetrkrnonce = @$_REQUEST['_racetrkrnonce'];
    if(!$_racetrkrnonce){
      $_racetrkrnonce = random_string(10);
      $_REQUEST['_racetrkrnonce'] = $_racetrkrnonce;
      $zy_flag = 1;
    }

  $race_array = array("_racetrkrnonce"=>$_racetrkrnonce);
  if(!@$options['query']){
    $options['query'] = $race_array;
  }
  else{
    $temp = array_merge($options['query'], $race_array);
    $options['query'] = $temp;
  }
  
  error_log("options query is ". $_racetrkrnonce ."\n", 3, "/tmp/drupal.log");

  $url = url($path, $options);

  if($zy_flag){
    $zy_log_file = fopen("/tmp/reqracer/php_log/drupal.log", "a");
    $zy_log_mesg4 = "PID: " . getmypid() . ". ";
    $zy_log_mesg4 .= "URL: " . $url . ". ";
    $zy_log_mesg4 .= "RequestID: " . $_SERVER['UNIQUE_ID'] . ". ";
    $zy_log_mesg4 .= "Action: . ";
    $zy_log_mesg4 .= "Redirect Token: " . $_REQUEST['_racetrkrnonce'] . ". \r\n";
    flock($zy_log_file, LOCK_EX);
    fwrite($zy_log_file, $zy_log_mesg4);
    fflush($zy_log_file);
    flock($zy_log_file, LOCK_UN);
    fclose($zy_log_file);
  }

  header('Location: ' . $url, TRUE, $http_response_code);

  // The "Location" header sends a redirect status code to the HTTP daemon. In
  // some cases this can be wrong, so we make sure none of the code below the
  // drupal_goto() call gets executed upon redirection.
  drupal_exit($url);
}

In file includes/form.inc, modify the function to log the token during form generation.
function drupal_prepare_form($form_id, &$form, &$form_state) {
  global $user;

  $form['#type'] = 'form';
  $form_state['programmed'] = isset($form_state['programmed']) ? $form_state['programmed'] : FALSE;

  // Fix the form method, if it is 'get' in $form_state, but not in $form.
  if ($form_state['method'] == 'get' && !isset($form['#method'])) {
    $form['#method'] = 'get';
  }

  // Generate a new #build_id for this form, if none has been set already. The
  // form_build_id is used as key to cache a particular build of the form. For
  // multi-step forms, this allows the user to go back to an earlier build, make
  // changes, and re-submit.
  // @see drupal_build_form()
  // @see drupal_rebuild_form()
  if (!isset($form['#build_id'])) {
    $form['#build_id'] = 'form-' . drupal_random_key();
  }
  $form['form_build_id'] = array(
    '#type' => 'hidden',
    '#value' => $form['#build_id'],
    '#id' => $form['#build_id'],
    '#name' => 'form_build_id',
    // Form processing and validation requires this value, so ensure the
    // submitted form value appears literally, regardless of custom #tree
    // and #parents being set elsewhere.
    '#parents' => array('form_build_id'),
  );

  // Add a token, based on either #token or form_id, to any form displayed to
  // authenticated users. This ensures that any submitted form was actually
  // requested previously by the user and protects against cross site request
  // forgeries.
  // This does not apply to programmatically submitted forms. Furthermore, since
  // tokens are session-bound and forms displayed to anonymous users are very
  // likely cached, we cannot assign a token for them.
  // During installation, there is no $user yet.
  if (!empty($user->uid) && !$form_state['programmed']) {
    // Form constructors may explicitly set #token to FALSE when cross site
    // request forgery is irrelevant to the form, such as search forms.
    if (isset($form['#token']) && $form['#token'] === FALSE) {
      unset($form['#token']);
    }
    // Otherwise, generate a public token based on the form id.
    else {
      $form['#token'] = $form_id;
      $form['form_token'] = array(
        '#id' => drupal_html_id('edit-' . $form_id . '-form-token'),
        '#type' => 'token',
        '#default_value' => drupal_get_token($form['#token']),
        // Form processing and validation requires this value, so ensure the
        // submitted form value appears literally, regardless of custom #tree
        // and #parents being set elsewhere.
        '#parents' => array('form_token'),
      );
    }
  }

  $_racetrkrnonce = substr($form['form_token']['#default_value'], 0, 10);
	$zy_log_file = fopen("/tmp/reqracer/php_log/drupal.log", "a");
	flock($zy_log_file, LOCK_EX);
	$zy_log_mesg1 = "PID: " . getmypid() . ". ";
	$zy_log_mesg1 .= "URL: " . $_SERVER['REQUEST_URI'] . ". ";
	$zy_log_mesg1 .= "RequestID: " . $_SERVER['UNIQUE_ID'] . ". ";
	$zy_log_mesg1 .= "Action: . ";
	$zy_log_mesg1 .= "Referer: " . $_SERVER['HTTP_REFERER'] . ". ";
	$zy_log_mesg1 .= "Generated Token: " . $_racetrkrnonce . ". ";
	$zy_log_mesg1 .= "\r\n";
	fwrite($zy_log_file, $zy_log_mesg1);
	fflush($zy_log_file);
	flock($zy_log_file, LOCK_UN);
	fclose($zy_log_file);

  if (isset($form_id)) {
    $form['form_id'] = array(
      '#type' => 'hidden',
      '#value' => $form_id,
      '#id' => drupal_html_id("edit-$form_id"),
      // Form processing and validation requires this value, so ensure the
      // submitted form value appears literally, regardless of custom #tree
      // and #parents being set elsewhere.
      '#parents' => array('form_id'),
    );
  }
  if (!isset($form['#id'])) {
    $form['#id'] = drupal_html_id($form_id);
  }

  $form += element_info('form');
  $form += array('#tree' => FALSE, '#parents' => array());

  if (!isset($form['#validate'])) {
    // Ensure that modules can rely on #validate being set.
    $form['#validate'] = array();
    // Check for a handler specific to $form_id.
    if (function_exists($form_id . '_validate')) {
      $form['#validate'][] = $form_id . '_validate';
    }
    // Otherwise check whether this is a shared form and whether there is a
    // handler for the shared $form_id.
    elseif (isset($form_state['build_info']['base_form_id']) && function_exists($form_state['build_info']['base_form_id'] . '_validate')) {
      $form['#validate'][] = $form_state['build_info']['base_form_id'] . '_validate';
    }
  }

  if (!isset($form['#submit'])) {
    // Ensure that modules can rely on #submit being set.
    $form['#submit'] = array();
    // Check for a handler specific to $form_id.
    if (function_exists($form_id . '_submit')) {
      $form['#submit'][] = $form_id . '_submit';
    }
    // Otherwise check whether this is a shared form and whether there is a
    // handler for the shared $form_id.
    elseif (isset($form_state['build_info']['base_form_id']) && function_exists($form_state['build_info']['base_form_id'] . '_submit')) {
      $form['#submit'][] = $form_state['build_info']['base_form_id'] . '_submit';
    }
  }

  // If no #theme has been set, automatically apply theme suggestions.
  // theme_form() itself is in #theme_wrappers and not #theme. Therefore, the
  // #theme function only has to care for rendering the inner form elements,
  // not the form itself.
  if (!isset($form['#theme'])) {
    $form['#theme'] = array($form_id);
    if (isset($form_state['build_info']['base_form_id'])) {
      $form['#theme'][] = $form_state['build_info']['base_form_id'];
    }
  }

  // Invoke hook_form_alter(), hook_form_BASE_FORM_ID_alter(), and
  // hook_form_FORM_ID_alter() implementations.
  $hooks = array('form');
  if (isset($form_state['build_info']['base_form_id'])) {
    $hooks[] = 'form_' . $form_state['build_info']['base_form_id'];
  }
  $hooks[] = 'form_' . $form_id;
  drupal_alter($hooks, $form, $form_state, $form_id);
}

/**
 * Helper function to call form_set_error() if there is a token error.
 */
function _drupal_invalid_token_set_form_error() {
  $path = current_path();
  $query = drupal_get_query_parameters();
  $url = url($path, array('query' => $query));

  // Setting this error will cause the form to fail validation.
  form_set_error('form_token', t('The form has become outdated. Copy any unsaved work in the form below and then <a href="@link">reload this page</a>.', array('@link' => $url)));
}

In function execute in file includes/database/mysql/query.inc, add log line:
$zy_log = "PID: ".getmypid().". RequestID: ".$_SERVER['UNIQUE_ID'].". Function name: query_insert_id. InsertID: ".$last_insert_id.". ";
error_log($zy_log, 3, "/tmp/reqracer/php_log/php_query.log");

In function query in file includes/database/database.inc, add line after $options += $this->defaultOptions();:
$query .= " /* " . $_SERVER['UNIQUE_ID'] . " */";